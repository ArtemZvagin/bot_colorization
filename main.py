import os
import cloudpickle
from loguru import logger
from aiogram.types import InputFile
from config import BOT_TOKEN
from aiogram import Bot, Dispatcher, executor, types

bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
with open('data/final_model.bin', 'rb') as file:
    predict = cloudpickle.load(file)['predict_func']

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("data/debug.json", format="{time} {message}",
           rotation="10MB", compression="zip", serialize=True)


async def logger_info(text):
    logger.info(text)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ-–±–µ–ª—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def save_photo(path_user, message):
    full_path = f'{path_user}_{message.photo[-1].file_unique_id}.jpg'
    if not os.path.exists(full_path):
        await message.photo[-1].download(destination_file=full_path)

    return full_path


async def on_startup(_):
    print('Bot is working')


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    name = message.from_user.first_name if message.from_user.first_name else '–¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥'
    text_start = f'''<b>–ü—Ä–∏–≤–µ—Ç, {name}! üëã
–†–∞–¥, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º.
–î–ª—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.</b>'''

    await message.answer(text_start, parse_mode='html')
    text_info = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}({message.from_user.username} ) –Ω–∞–∂–∞–ª —Å—Ç–∞—Ä—Ç'
    await logger_info(text_info)


@dp.message_handler(content_types=['photo'])
async def send_photo(message: types.Message):
    await message.answer('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...')
    user_name = message.from_user.username if message.from_user.username else 'unknown'
    first_name = message.from_user.first_name if message.from_user.first_name else 'Unknown'

    text_info = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name}({user_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ'
    await logger_info(text_info)

    try:
        black_photo = await save_photo(f'data/photo_black/{user_name}', message)
        color_photo = black_photo.replace('photo_black', 'photo_color')
        predict(black_photo, color_photo)
        photo = InputFile(color_photo)
        await message.answer_photo(photo)
        await logger_info(f'{first_name}_{user_name} —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

    except Exception as _ex:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!')
        await logger_info(f'{first_name}_{user_name} –æ—à–∏–±–∫–∞. {_ex}')


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
